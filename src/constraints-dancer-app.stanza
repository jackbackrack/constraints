defpackage constraints-dancer-app :
  import core
  import math
  import collections
  import utils/file-system
  import utils/math
  import utils/rnd
  import utils/seqable
  import geom/vec
  import geom/mat
  import geom/angle
  import geom/shape
  import geom/bounded
  import geom/poseable
  import geom/line-segment
  import geom/polygon
  import geom/polyline
  import geom/line-loop
  import geom/box
  import geom/polyhedron
  import geom/polyhedra
  import gui/props
  import gui/lay
  import gui/viz
  import gfx/gl
  import gfx/glfw
  import geom/gfx
  import gfx/drawing
  import calculus
  import constraints
  import constraints-viz

defn name (v:Entity) : id(v) ; alternative name

defstruct DancerBody <: Module :
  id : Symbol with: (as-method => true)
  num-arms : Int
  num-links : Int
  arms : Tuple<ArmBody> with: (init => to-tuple $ for i in 0 to num-arms seq :
    make-instance(symbol-join $ [`arm i], ArmBody{_, num-links, 5.0f}))
  entities : Tuple<Entity> with: (as-method => true, init => arms)
  cost : Exp with: (as-method => true, init => sum $ [
    SameVertexConstraint(to-tuple $ for arm in arms seq : a(lines(links(arm))[0])),
    CenterXConstraint(to-tuple $ seq(exp, cat-all $ seq(all-vertices, arms)),
                      exp(b(last(lines(links(arms[0])))))) ])

defstruct GroundedDancerBody <: Module :
  id : Symbol with: (as-method => true)
  num-arms : Int
  num-links : Int
  arm-len : Float
  body : DancerBody with: (init => make-instance(`body, DancerBody{_, num-arms, num-links}))
  entities : Tuple<Entity> with: (as-method => true, init => [ body ])
  cost : Exp with: (as-method => true, init => sum $ 
    cat-all $ [ [ SameVecConstraint([ exp(b(last(lines(links(arms(body)[0]))))), Const(V3f(0.0f, -8.0f, 0.0f))]) ]
                for arm in arms(body) seq-cat : for line in lines(links(arm)) seq: EdgeLengthConstraint(exp(ab(line)), Const(arm-len)) ])

defn leg (a:DancerBody) -> ArmBody :
  arms(a)[0]

defn right-arm (a:DancerBody) -> ArmBody :
  arms(a)[1]

defn left-arm (a:DancerBody) -> ArmBody :
  last(arms(a))

defstruct DancerBodies <: Module :
  id : Symbol with: (as-method => true)
  num-dancers : Int
  num-arms : Int
  num-links : Int
  dancers : Tuple<DancerBody> with: (init => to-tuple $ for i in 0 to num-dancers seq :
    make-instance(symbol-join $ [`dancer i], DancerBody{_, num-arms, num-links}))
  leg-edges : Tuple<Edge> with: (init => to-tuple $ for ([p, n] in successive-pairs-wrapped(dancers), i in 0 to false) seq :
    Edge(symbol-join $ [`le, i], tip(leg(p)), tip(leg(n)), true, false))
  arm-edges : Tuple<Edge> with: (init => to-tuple $ for ([p, n] in successive-pairs-wrapped(dancers), i in 0 to false) seq :
    Edge(symbol-join $ [`ae, i], tip(right-arm(p)), tip(left-arm(n)), true, false))
  entities : Tuple<Entity> with: (as-method => true, init => to-tuple $ cat-all $ [dancers, leg-edges, arm-edges])
  cost : Exp with: (as-method => true, init => Const(0.0f), updater => sub-cost)

; defn TimeDancerBody (name:Symbol, num-arms:Int, num-links:Int, time:SymVar) -> BindBody :
;   val desired-len = 4.0f
;   BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
;            fn (m) : cat-all $ [[ y(sv(b(last(lines(links(arms(m)[0]))))))
;                                  y(sv(b(last(lines(links(last(arms(m)))))))) ]
;                                for arm in arms(m) seq-cat :
;                                  for line in lines(links(arm)) seq: len(line),
;                                vars(b(last(lines(links(arms(m)[1]))))) ],
;            cat-all $ [[ Const(-8.0f), Const(8.0f) ],
;                       for i in 0 to num-arms seq-cat : for i in 0 to num-links seq : Const(desired-len),
;                       exps(radar(6.0f, 5.0f, time)) ],
;            [ time ])

; defn TimeDancerBody (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
;   BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
;            fn (m) :
;              cat-all $ [ [ b(last(lines(links(arms(m)[0])))) => Const(V3f(0.0f, -8.0f, 0.0f))
;                            b(last(lines(links(arms(m)[1])))) => radar(radius, 5.0f, time) ]
;                          for arm in arms(m) seq-cat : for line in lines(links(arm)) seq: len(line) => Const(desired-len) ]
;            [ time ])

public defn MyBindBody<?T> (name:Symbol, mod:?T&Module, new-vars:Tuple<AnyVar>) :
  BindBody(name,
    new-vars,
    mod,
    to-tuple $ cat(new-vars, [ mod ]),
    Const(0.0f))

defn TimeDancerBody1z (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  MyBindBody(`tdb, DancerBody(`tab, num-arms, num-links), [time])

defn TimeDancerBody1a (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mag(xyz(2.0f * radius)) $ cube-path, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : []
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1b (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.75f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : []
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1) ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1c (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : [ HorizontalConstraint(exp(ab(wrist(right-arm(m))))) ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           a(wrist(right-arm(m))) => exp(path1)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1d (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : [ Const(4.0f) * AngleConstraint(elbow-angs(right-arm(m))[0], Const(PI-F)) ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1e (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : [
             SameVecConstraint([ reflect-y-mat-exp() * reflect-x-mat-exp() * exp(b(wrist(right-arm(m)))), exp(b(wrist(left-arm(m))))])
             ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1) ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1f (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  val r = SymVar(`radius, radius, false)
  val circ  = Circle(`circle, Vertex(`center, V3f(0.0f, 0.0f, 0.0f)), r, false, false)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : [
             ProjectOntoCircle(b(wrist(left-arm(m))), circ)
             ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1) ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1, circ, r]))

defn TimeDancerBody1g (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  val path2 = PolyLinePath(`path2, reflect-y $ reflect-x $ mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 8.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : []
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1)
                           b(wrist(left-arm(m))) => exp(path2)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1, path2]))

; SameVecConstraint([ reflect-x-mat-exp() * exp(a), exp(b)])

defn TimeDancerBody1h (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mov-y(0.0f) $ mag(xyz(2.0f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : [
             ; SameVecConstraint([ mov-mat-exp(Const(V3f(0.0f, 6.0f, 0.0f))) * mag-mat-exp(0.5f) * reflect-y-mat-exp() * reflect-x-mat-exp() * exp(b(wrist(right-arm(m)))), exp(b(wrist(left-arm(m))))])
             SameVecConstraint([ mov-mat-exp(Const(V3f(0.0f, 10.0f, 0.0f))) * mag-mat-exp(0.5f) * exp(b(wrist(right-arm(m)))), exp(b(wrist(left-arm(m))))])
             ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => exp(path1) ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1]))

defn TimeDancerBody1i (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = bounce(6.0f, 1.0f, time) + Const(V3f(4.0f, 2.0f, 0.0f))
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : []
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => path1
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           [time])

defn TimeDancerBody1j (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = (reflect-xy-mat-exp() * bounce(8.0f, 1.5f, time)) + Const(V3f(0.0f, 0.0f, 0.0f))
  val path2 = bounce(3.0f, 1.0f, time) + Const(V3f(0.0f, -4.0f, 0.0f))
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) : []
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           b(wrist(right-arm(m))) => path1
                           a(base(left-arm(m))) => path2
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           [time])

defn TimeDancerBody2 (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mag(xyz(2.0f * radius)) $ cube-path, 8.0f)
  ; val path2 = PolyLinePath(`path2, mov-y(-3.0f) $ mag(xyz(1.5f * radius)) $ round-you, 16.0f)
  val path2 = PolyLinePath(`path2, mov-y(0.0f) $ mag(xyz(1.5f * radius)) $ round-you, 16.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) :
             [ HorizontalConstraint(exp(ab(wrist(left-arm(m)))))
             ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           ; y(b(ankle(leg(m)))) => Const(-8.0f)
                           b(wrist(right-arm(m))) => exp(path1)
                           a(wrist(left-arm(m))) => exp(path2)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1, path2]))

defn TimeDancerBody3 (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val path1 = PolyLinePath(`path1, mag(xyz(2.0f * radius)) $ cube-path, 8.0f)
  val path2 = PolyLinePath(`path2, mov-y(-3.0f) $ mag(xyz(1.5f * radius)) $ round-you, 16.0f)
  val path3 = PolyLinePath(`path3, mov-y(-1.0f) $ mag(xyz(0.5f * radius)) $ circle-line, 4.0f)
  BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
           fn (m) :
             [ HorizontalConstraint(exp(ab(wrist(left-arm(m)))))
             ]
           fn (m) :
             cat-all $ [ [ b(ankle(leg(m))) => Const(V3f(0.0f, -8.0f, 0.0f))
                           ; y(b(ankle(leg(m)))) => Const(-8.0f)
                           b(wrist(right-arm(m))) => exp(path1)
                           b(wrist(left-arm(m))) => exp(path2)
                           ; a(wrist(left-arm(m))) => exp(path2)
                           a(base(left-arm(m))) => exp(path3)
                           ]
                         for arm in arms(m) seq-cat : for line in lines(links(arm)) seq:
                           len(line) => Const(desired-len) ]
           to-tuple $ cat-all $ seq(vars, [path1, path2, path3]))

defn TimeDancerBodies (name:Symbol, num-dancers:Int, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
  val dbs0 = DancerBodies(`tab, num-dancers, num-arms, num-links),
  val dbs  = sub-cost(dbs0, sum $ [
                sum $ for [p, n] in successive-pairs-wrapped(dancers(dbs0)) seq :
                        sqerr(Const(2.0f * desired-len) -
                              distance(exp(tip(right-arm(p))), exp(tip(left-arm(n))))) + 
                        sqerr(Const(6.0f * desired-len) -
                              distance(exp(tip(leg(p))), exp(tip(leg(n))))),
                sum $ for (d in dancers(dbs0), i in 0 to false) seq :
                        sqerr(Const(-8.0f) - y(exp(tip(leg(d)))))
                ])
  val r = radius
  val pline = mov-y(2.0f) $ mag(xyz(r)) $ cube-path
  val path1 = PolyLinePath(`path1, pline, 8.0f)
  BindBody(`tdbs, dbs,
           fn (m) :
             cat-all $ [ for dancer in dancers(m) seq-cat :
                           for arm in arms(dancer) seq-cat :
                             for line in lines(links(arm)) seq:
                               len(line) => Const(desired-len),
                         [ tip(right-arm(dancers(m)[0])) => exp(path1) ] ]
           ; [ time ]
           to-tuple $ vars(path1)
           )

; defn TimePolyDancerBody (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
;   ; val poly = to-polyline2f $ polygon-n(2.0f * radius, 128))
;   ; val poly = polygon-n(2.0f * radius, 4)
;   ; val poly = Polygon([Contour $ [V2f(-10.0f, -10.0f), V2f(10.0f, -10.0f), V2f(10.0f, 10.0f), V2f(-10.0f, 10.0f)]])
;   ; val pline = to-polyline3f $ to-polyline2f $ poly
;   ; val poly = polygon-n(2.0f * radius, 4)
;   val r = radius
;   val pline = PolyLine3f $ [[
;     r * V3f(-1.0f, -1.0f, -1.0f), r * V3f(1.0f, -1.0f, 1.0f), r * V3f(1.0f, 1.0f, -1.0f), r * V3f(-1.0f, 1.0f, 1.0f)]]
;   val line = cubic-interpolate-wrapped(pline, 16)
;   val path = PolyLinePath(`path, line, 1.0f)
;   BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
;            fn (m) : cat-all $ [[ b(last(lines(links(arms(m)[0])))) => Const(V3f(0.0f, 0.0f, -8.0f)),
;                                  b(last(lines(links(arms(m)[1])))) => exp(path) ]
;                                for arm in arms(m) seq-cat :
;                                  for line in lines(links(arm)) seq: len(line) => Const(desired-len),
;                                ]
;            vars(path))
; 
; defn TimePoly2DancerBody (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float, radius:Float, time:SymVar) -> BindBody :
;   val path0 = PolyLinePath(`path0, to-polyline3f $ to-polyline2f $ polygon-n(2.0f * radius, 128), 1.0f)
;   val path1 = PolyLinePath(`path1, reflect-xz $ to-polyline3f $ to-polyline2f $ polygon-n(2.0f * radius, 128), 1.0f)
;   BindBody(`tdb, DancerBody(`tab, num-arms, num-links),
;            fn (m) : cat-all $ [ [ b(last(lines(links(arms(m)[0])))) => Const(V3f(0.0f, 0.0f, -8.0f))
;                                   b(last(lines(links(arms(m)[1])))) => exp(path0)
;                                   b(last(lines(links(arms(m)[2])))) => exp(path1) ]
;                                for arm in arms(m) seq-cat :
;                                  for line in lines(links(arm)) seq: len(line) => Const(desired-len),
;                                ],
;            to-tuple $ cat(vars(path0), vars(path1)))


defn TimePoly2DancerBody (name:Symbol, num-arms:Int, num-links:Int, desired-len:Float) -> BindBody :
  val path0 = PolyLinePath2(`path0)
  BindBody(`tdb,
           DancerBody(`tab, num-arms, num-links),
           fn (m) : for arm in arms(m) seq-cat : for line in lines(links(arm)) seq: len(line) => Const(desired-len),
           []
           )

defn lookup-polyhedron (name:String, len:Float) -> Polyhedron :
  val poly = switch(name) :
    "tet" : tet-mesh
    "cube" : cube-mesh
    "rhombic" : fab-rhombic-dodecahedron()
    "dodecahedron" : fab-dodecahedron()
  val e0 = edges(poly)[0]
  val now-len = distance(vertices(poly)[e0[0]], vertices(poly)[e0[1]])
  mag(len / now-len, poly)

defn demo (top-name:String, n-0:Int, n-1:Int, n-2:Int, x-0:Float, x-1:Float) :
  val time = SymVar(`time, 0.0f, false, false)
  val m =
    switch(top-name) :
      "arm" : ArmBody(`main, n-0, x-0)
      "dancer" : GroundedDancerBody(`main, n-0, n-1, x-0)
      "time-dancer-test" : TimeDancerBody1z(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-cube" : TimeDancerBody1a(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing" : TimeDancerBody1b(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-wrist" : TimeDancerBody1c(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-straight" : TimeDancerBody1d(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-reflect" : TimeDancerBody1e(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-circle" : TimeDancerBody1f(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-reflect-time" : TimeDancerBody1g(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-uing-reflect-mag" : TimeDancerBody1h(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-bounce" : TimeDancerBody1i(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-double-bounce" : TimeDancerBody1j(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-cube-uing-wrist" : TimeDancerBody2(`main, n-0, n-1, x-0, x-1, time)
      "time-dancer-cube-uing-wrist-hulu" : TimeDancerBody3(`main, n-0, n-1, x-0, x-1, time)
      ; "time-poly-dancer" : TimePolyDancerBody(`main, n-0, n-1, x-0, x-1, time)
      "time-dancers" : TimeDancerBodies(`main, n-0, n-1, n-2, x-0, x-1, time)
      else : LineBody(`line, 7.0f)

  ; println("RUNNING MODULE...")

  run-module(m, time)  

defn demo (top-name:String) :
  demo(top-name, top-n-0, top-n-1, top-n-2, top-x-0, top-x-1)

defn main () :
  parse-args(screen-props, command-line-arguments())
  RANDOM = Random(current-time-us() when (top-seed < 0) else to-long(top-seed))
  demo(top-name)  

main()
