defpackage constraints-paths :
  import core
  import math
  import collections
  import utils/rnd
  import utils/seqable
  import utils/math
  import geom/vec
  import geom/mat
  import geom/angle
  import geom/poseable
  import geom/polygon
  import geom/box
  import geom/shape
  import geom/bounded
  import geom/line-segment
  import geom/polyline
  import geom/line-loop
  import geom/polyhedron
  import geom/polyhedra
  import constraints

defn interval-bsearch (elts:Tuple<Float>, x:Float) -> Int :
  let loop (l:Int = 0, r:Int = length(elts) - 1) :
    if r >= l :
      val mid = l + (r - l) / 2
      if elts[mid] == x :
        mid
      else if elts[mid] < x :
        loop(mid + 1, r)
      else :
        loop(l, mid - 1)
    else :
      max(0, l - 1)

public deftype Path <: Entity
public defmulti point (p:Path) -> Vertex

public defstruct PolyLinePath <: Path :
  id : Symbol with: (as-method => true, updater => sub-id)
  time : AnyVar
  poly : PolyLine3f with: (setter => set-poly)
  duration : AnyVar
  phase : AnyVar
  point : Vertex with: (as-method => true)

defmethod vars (e:PolyLinePath) -> Seqable<AnyVar> :
  cat-all $ [[duration(e), phase(e)], vars(point(e))]

public defn set-params (p:PolyLinePath, new-duration:Float, new-phase:Float) -> PolyLinePath :
  set-x(duration(p), new-duration)
  set-x(phase(p), new-phase)
  p

public defn interpolator-of (p:PolyLinePath) -> (() -> V3f) :
  PolyLinePathInterpolator(time(p), poly(p), duration(p), phase(p))

defn time-streamer (time:AnyVar, f:() -> V3f) -> () -> V3f :
  var last-time:Float = 0.0f
  var last-pt:V3f = xyz(0.0f)
  defn pt-of () -> V3f :
    if x(time) == last-time :
      last-pt
    else :
      val pt    = f()
      last-pt   = pt
      last-time = x(time)
      pt
  pt-of

defn delta-streamer (time:AnyVar, f:Float -> V3f) -> () -> V3f :
  var last-time:Float = 0.0f
  var last-pt:V3f = xyz(0.0f)
  defn pt-of () -> V3f :
    if x(time) == last-time :
      last-pt
    else :
      val pt    = f(x(time) - last-time)
      last-pt   = pt
      last-time = x(time)
      pt
  pt-of

; TODO: ONLY ONE STROKE FOR NOW
; TODO: REDO POLYLINE3f to have LineString3f as elements
public defn PolyLinePathInterpolator (time:AnyVar, poly:PolyLine3f, duration:AnyVar, phase:AnyVar) -> (() -> V3f) :
  val stroke = strokes(poly)[0]
  val segs:Tuple<[V3f,V3f]> = to-tuple $ successive-pairs(stroke)
  val sums = to-tuple $ cat([0.0f], cumsum $ seq(fn (seg) : distance(seg[0], seg[1]), segs))

  defn f () :
    val tot-len = last(sums)
    val d     = x(time) * tot-len / x(duration) + x(phase)
    val dist  = d % tot-len
    val idx   = interval-bsearch(sums, dist)
    val seg   = segs[idx]
    val start = seg[0]
    val end   = seg[1]
    val off   = dist - sums[idx]
    val dir   = normalize(end - start) 
    start + off * dir
    
  time-streamer(time, f)

public defn PolyLinePath (name:Symbol, time:AnyVar, poly:PolyLine3f, duration:AnyVar, phase:AnyVar) -> PolyLinePath :
  val pt-of = PolyLinePathInterpolator(time, poly, duration, phase)
  defn nm (i:Symbol) : add-suffix(name, i)
  PolyLinePath(name, time, poly, duration, phase,
    Vertex(name, true,
           FunVar(nm(`x), 0.0f, fn (v) : set-x(v, x(pt-of())))
           FunVar(nm(`y), 0.0f, fn (v) : set-x(v, y(pt-of()))),
           FunVar(nm(`z), 0.0f, fn (v) : set-x(v, z(pt-of())))))

public defn PolyLinePath (name:Symbol, time:SymVar, poly:PolyLine3f, duration:Float, phase:Float) -> PolyLinePath :
  val path-duration = SymVar(add-suffix(name, `duration), duration, false, false)
  val path-phase = SymVar(add-suffix(name, `phase), phase, false, false)
  PolyLinePath(name, time, poly, path-duration, path-phase)

public defn PolyLinePath (name:Symbol, time:SymVar, poly:PolyLine3f, duration:Float) -> PolyLinePath :
  PolyLinePath(name, time, poly, duration, 0.0f)

defn rnd-vec (a:Float) : rnd(dims-to-box $ xyz(a))

public defn Orbit2ParticleInterpolator (time:SymVar, circle1:Circle, duration1:SymVar, circle2:Circle, duration2:SymVar) -> () -> V3f :
  var axis1:V3f = x3f(1.0f)
  var position1:V3f = x(radius(circle1)) * normalize(rnd-vec(1.0f))
  var axis2:V3f = x3f(1.0f)
  var position2:V3f = x(radius(circle2)) * normalize(rnd-vec(1.0f))

  defn f (delta:Float) :
    val circum1 = 2.0f * PI-F * x(radius(circle1)) 
    axis1 = normalize(axis1 + rnd-vec(0.1f))
    val velocity1 = circum1 * delta / x(duration1) * normalize(position1) % axis1
    position1 = position1 + velocity1
    position1 = x(radius(circle1)) * normalize(position1)

    val circum2 = 2.0f * PI-F * x(radius(circle2)) 
    axis2 = normalize(axis2 + rnd-vec(0.1f))
    val velocity2 = circum2 * delta / x(duration2) * normalize(position2) % axis2
    position2 = position2 + velocity2
    position2 = x(radius(circle2)) * normalize(position2)

    set-pos(center(circle2), pos(center(circle1)) + position1)

    pos(center(circle1)) + position1 + position2

  delta-streamer(time, f)

public defstruct Orbit2Particle <: Path :
  id : Symbol with: (as-method => true, updater => sub-id)
  time : SymVar
  circle1 : Circle
  duration1 : SymVar
  circle2 : Circle
  duration2 : SymVar
  point : Vertex with: (as-method => true)

defmethod vars (e:Orbit2Particle) -> Seqable<AnyVar> :
  cat-all $ [[duration1(e), duration2(e)], vars(point(e)), vars(circle1(e)), vars(circle2(e))]

public defn set-params (p:Orbit2Particle, new-center1:V3f, new-radius1:Float, new-duration1:Float,
                                          new-center2:V3f, new-radius2:Float, new-duration2:Float) -> Orbit2Particle :
  set-pos(center(circle1(p)), new-center1)
  set-x(radius(circle1(p)), new-radius1)
  set-x(duration1(p), new-duration1)
  set-pos(center(circle2(p)), new-center2)
  set-x(radius(circle2(p)), new-radius2)
  set-x(duration2(p), new-duration2)
  p

public defn interpolator-of (p:Orbit2Particle) -> () -> V3f :
  Orbit2ParticleInterpolator(time(p), circle1(p), duration1(p), circle2(p), duration2(p))

public defn Orbit2Particle (name:Symbol, time:SymVar, center1:V3f, radius1:Float, radius2:Float, duration1:Float, duration2:Float) -> Orbit2Particle :
  defn nm (i:Symbol) : add-suffix(name, i)
  val orbit-circle1 = Circle(add-suffix(name, `circle1), Vertex(add-suffix(name, `center), false, center1, false),
                             SymVar(add-suffix(name, `radius), radius1, false, false), true, false)
  val orbit-duration1 = SymVar(add-suffix(name, `duration1), duration1, false, false)
  val orbit-circle2 = Circle(add-suffix(name, `circle2), Vertex(add-suffix(name, `center), false, xyz(0.0f), false),
                             SymVar(add-suffix(name, `radius), radius2, false, false), true, false)
  val orbit-duration2 = SymVar(add-suffix(name, `duration1), duration2, false, false)
  val pt-of = Orbit2ParticleInterpolator(time, orbit-circle1, orbit-duration1, orbit-circle2, orbit-duration2)
  Orbit2Particle(name, time, orbit-circle1, orbit-duration1, orbit-circle2, orbit-duration2,
    Vertex(name, true,
           FunVar(nm(`x), 0.0f, fn (v) : set-x(v, x(pt-of()))),
           FunVar(nm(`y), 0.0f, fn (v) : set-x(v, y(pt-of()))),
           FunVar(nm(`z), 0.0f, fn (v) : set-x(v, z(pt-of())))))

;;; ORBIT PARTICLE

public defn OrbitParticleInterpolator (time:SymVar, circle:Circle, duration:SymVar) -> () -> V3f :
  var axis1:V3f = x3f(1.0f)
  var position1:V3f = x(radius(circle)) * normalize(y3f(1.0f) + rnd-vec(0.1f))

  defn f (delta:Float) :
    axis1 = normalize(axis1 + rnd-vec(0.1f))
    val circum = 2.0f * PI-F * x(radius(circle)) 
    val velocity1 = (circum * delta / x(duration)) * normalize(position1) % axis1
    position1 = position1 + velocity1
    position1 = x(radius(circle)) * normalize(position1)
    pos(center(circle)) + position1

  delta-streamer(time, f)

public defstruct OrbitParticle <: Path :
  id : Symbol with: (as-method => true, updater => sub-id)
  time : SymVar
  circle : Circle
  duration : SymVar
  point : Vertex with: (as-method => true)

defmethod vars (e:OrbitParticle) -> Seqable<AnyVar> :
  cat-all $ [[duration(e)], vars(point(e)), vars(circle(e))]

public defn set-params (p:OrbitParticle, new-center:V3f, new-radius:Float, new-duration:Float) -> OrbitParticle :
  set-pos(center(circle(p)), new-center)
  set-x(radius(circle(p)), new-radius)
  set-x(duration(p), new-duration)
  p

public defn interpolator-of (p:OrbitParticle) -> (() -> V3f) :
  OrbitParticleInterpolator(time(p), circle(p), duration(p))

public defn OrbitParticle (name:Symbol, time:SymVar, circle:Circle, duration:SymVar) -> OrbitParticle :
  val pt-of = OrbitParticleInterpolator(time, circle, duration)
  defn nm (i:Symbol) : add-suffix(name, i)
  OrbitParticle(name, time, circle, duration, 
    Vertex(name, true,
           FunVar(nm(`x), 0.0f, fn (v) : set-x(v, x(pt-of()))),
           FunVar(nm(`y), 0.0f, fn (v) : set-x(v, y(pt-of()))),
           FunVar(nm(`z), 0.0f, fn (v) : set-x(v, z(pt-of())))))

public defn OrbitParticle (name:Symbol, time:SymVar, center:V3f, radius:Float, duration:Float) -> OrbitParticle :
  val orbit-circle = Circle(add-suffix(name, `circle), Vertex(add-suffix(name, `center), false, center, false),
                            SymVar(add-suffix(name, `radius), radius, false, false), true, false)
  val orbit-duration = SymVar(add-suffix(name, `duration), duration, false, false)
  OrbitParticle(name, time, orbit-circle, orbit-duration)

public defn PointInterpolator (pt:V3f) -> () -> V3f :
  fn () : pt

#for (Prim in [Float Float]
      Vec in [V2f V3f]
      Stroke in [Stroke2f Stroke3f]
      LineSegment in [LineSegment2f LineSegment3f]
      Box in [Box2f Box3f]
      neg-inf-box in [neg-inf-box2f neg-inf-box3f]
      StrokeName in ["Stroke2f" "Stroke3f"]) :

  public defstruct Stroke <: AnyShape&Equalable :
    state: AnyShapeState with: (as-method => true)
    points: Tuple<Vec>

  public defn Stroke (points:Seqable<Vec>) :
    Stroke(default-anyshape-state(), to-tuple $ points)

  defmethod equal? (a:Stroke, b:Stroke) -> True|False :
    points(a) == points(b)

  defmethod xyz (mat:Mat44f, s:Stroke) -> Stroke :
    Stroke(state(s), for v in points(s) map : mat * v)

  defmethod print (o:OutputStream, c:Stroke) :
    print(o, "%_(%_)" % [StrokeName points(c)])

  public defn cat (s1:Stroke, s2:Stroke) -> Stroke :
    Stroke(cat(points(s1), points(s2)))

  defmethod bounds (p:Stroke) -> Box3f :
    xyz(reduce(union, neg-inf-box(), seq(Box, points(p))))

  public defn segments (s:Stroke) -> Seq<LineSegment> :
    val pts = points(s)
    for i in 0 to (length(pts) - 1) seq :
      LineSegment(pts[i], pts[i + 1])

public defn to-stroke3f (s:Stroke2f) -> Stroke3f :
  Stroke3f(state(s), for v in points(s) map: xyz(v))

public defn to-polyline3f (s:Stroke3f) -> PolyLine3f :
  PolyLine3f(state(s), [points(s)])

public defstruct Arc :
  center : V2f
  radius : Float
  angle : Float       ; degrees
  start-angle : Float ; degrees

public defn sample (arc:Arc, delta:Float) -> Stroke2f :
  val r = radius(arc)
  val n = round(angle(arc) / delta)
  val inc = angle(arc) / n
  Stroke2f $ for i in 0 to (to-int(n) + 1) seq :
    val a = degrees-to-radians(start-angle(arc) + to-float(i) * inc)
    center(arc) + V2f(r * cos(a), r * sin(a))

public defn double-you (radius:Float) -> Stroke2f :
  val you1 = sample(Arc(xy(0.0f), radius, 180.0f, 0.0f), 15.0f)
  cat(you1, reflect-x $ you1)

public defn repeat-first-point (pts:Tuple<V3f>) -> Tuple<V3f> :
  to-tuple $ cat(pts, [pts[0]])

public val square-path = PolyLine3f $ [ repeat-first-point $ [
  V3f(1.0f, 1.0f, 0.0f),   V3f(-1.0f, 1.0f, 0.0f), V3f(-1.0f, -1.0f, 0.0f), V3f(1.0f, -1.0f, 0.0f)]]

public val cube-path = PolyLine3f $ [ repeat-first-point $ [
  V3f(1.0f, 1.0f, -1.0f), V3f(-1.0f, 1.0f, 1.0f), V3f(-1.0f, -1.0f, -1.0f), V3f(1.0f, -1.0f, 1.0f)]]

public val square-you = PolyLine3f $ [ repeat-first-point $ [
    V3f(-1.0f, 1.0f, 0.0f), V3f(-1.0f, -1.0f, 0.0f), V3f(1.0f, -1.0f, 0.0f), V3f(1.0f, 1.0f, 0.0f)
    V3f(1.0f, -1.0f, 0.0f), V3f(-1.0f, -1.0f, 0.0f) ]]

public val round-you = to-polyline3f $ to-stroke3f $ reflect-y $ double-you(1.0f)
public val circle-line = to-polyline3f $ to-stroke3f $ sample(Arc(xy(0.0f), 1.0f, 360.0f, 0.0f), 15.0f)

public defn PolyLinePath2 (name:Symbol) -> Vertex :
  Vertex(name, true, SymVar(`x, 0.0f) SymVar(`y, 0.0f) SymVar(`z, 0.0f))
