defpackage playback :
  import core
  import math
  import collections
  import geom/box
  import geom/angle

defstruct Joint :
  id : Int
  name : Symbol
  sign : Float
  new-id : Int

defn main () :
  val filename = "logs/abc.txt"
  val base-id = 10
  val lines = to-seq $ split(slurp(filename), "\n")
  val num = to-int!(next(lines))
  val joints = Array<Joint>(num)
  for i in 0 to num do :
    ; id name factor offset
    val elts = to-tuple $ split(next(lines), " ")
    val id = to-int!(elts[0])
    val name = to-symbol(elts[1])
    val sign = to-float!(elts[2])
    val new-id = to-int!(elts[3])
    joints[id] = Joint(id, name, sign, new-id)
  println("--- FLOAT-ANGLES")
  val float-anglez = Vector<Array<Float>>()
  let loop () :
    if not empty?(lines) :
      val line = next(lines)
      if not empty?(line) :
        val tick = to-int!(line)
        val angles = Array<Float>(num)
        for i in 0 to num do :
          val elts = to-tuple $ split(next(lines), " ")
          val [idx, angle] = [to-int!(elts[0]), to-float(elts[1]) as Float]
          val joint = joints[idx]
          angles[new-id(joint)] = sign(joint) * angle
        println(angles)
        add(float-anglez, angles)
        loop()
  println("--- INT-ANGLES")
  val int-angle-range = Box1i(0, 4095)
  val int-anglez = to-tuple $ for angles in float-anglez seq :
    val int-angles = to-tuple $ for angle in angles seq :
      val radians = degrees-to-radians(angle)
      val norm-float-angle = round(to-float(hi(int-angle-range)) * (radians + PI-F) / (2.0f * PI-F))
      val int-angle = max(0, min(to-int(norm-float-angle), hi(int-angle-range)))
      int-angle
    println(int-angles)
    int-angles
  int-anglez

main()

  
